@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

$sortedBreakpoints: map-sort-by-values(map.merge(token(breakpoints), ('default': 0)));

$fontSchema: (
  fontFamily: 'font-family',
  fontSize: 'font-size',
  lineHeight: 'line-height',
  fontWeight: 'font-weight',
  fontStyle: 'font-style',
  fontStretch: 'font-stretch',
  letterSpacing: 'letter-spacing',
  textCase: 'text-transform',
  textDecoration: 'text-decoration'
);

@function generate-fluid-typography-value($fontName, $attributeName) {
  // Assign default range values
  $rangeStart: breakpoint(config(typography, fluid, range, start));
  $rangeEnd: breakpoint(config(typography, fluid, range, end));

  // Re-assign range values if provided in config
  @if (type-of(config(typography, fluid, tags, $fontName, range)) == 'map') {
    @if (map.has-key(config(typography, fluid, tags, $fontName, range), start)) {
      $rangeStart: breakpoint(config(typography, fluid, tags, $fontName, range, start));
    }

    @if (map.has-key(config(typography, fluid, tags, $fontName, range), end)) {
      $rangeEnd: breakpoint(config(typography, fluid, tags, $fontName, range, end));
    }
  }

  // Assign default style values
  $valueStart: px-to-rem(token(font, config(typography, fluid, styles, start), $fontName, fontSize));
  $valueEnd: px-to-rem(token(font, config(typography, fluid, styles, end), $fontName, fontSize));

  // Re-assign style values if provided in config
  @if (type-of(config(typography, fluid, tags, $fontName, styles)) == 'map') {
    @if (map.has-key(config(typography, fluid, tags, $fontName, styles), start)) {
      @if (map.has-key(config(typography, fluid, tags, $fontName, styles, start), $attributeName)) {
        $valueStart: px-to-rem(config(typography, fluid, tags, $fontName, styles, start, $attributeName));
      }
    }

    @if (map.has-key(config(typography, fluid, tags, $fontName, styles), end)) {
      @if (map.has-key(config(typography, fluid, tags, $fontName, styles, end), $attributeName)) {
        $valueEnd: px-to-rem(config(typography, fluid, tags, $fontName, styles, end, $attributeName));
      }
    }
  }

  // Assign default value to $valueStart
  $value: $valueStart;

  // Re-assign value if start & end values & ranges are different and rangeStart is smaller than rangeEnd
  @if ($valueStart != $valueEnd and $rangeStart != $rangeEnd and $rangeStart < $rangeEnd) {
    $factor: calc(calc(1 / calc($rangeEnd - $rangeStart)) * calc($valueEnd - $valueStart));

    $rem: $valueStart - $rangeStart * $factor;
    $vw: (100 * $factor) * 1vw;

    $value: clamp($valueStart, calc($vw + $rem), $valueEnd);
  } 

  // @debug $value, $rangeStart, $rangeEnd;
  // @debug ----;

  @return $value;
}

@function generate-font-attributes-map($fontName, $fontMap) {
  $output: ();

  @each $key, $name in $fontSchema {
    $value: map.get($fontMap, $key);
    $sanitizedName: sanitize($fontName);

    // @debug $fontName, $name, $sanitizedName, $value;

    @if ($name == 'font-family') {
      // merging token font with a fallbacks defined in config
      $fontFallback: config(typography, fontFallbacks, '#{$value}');
      @if ($fontFallback) {
        $combinedValue: "#{$value}, #{$fontFallback}";
        $output: map.set($output, $name, string.unquote($combinedValue));
      } @else {
        $output: map.set($output, $name, $value);
      }
    } @else if ($name == 'font-size') {
      @if (map.has-key(config(typography), fluid) and map.has-key(config(typography, fluid, tags), $fontName)) {
        $output: map.set($output, $name, fallback, px-to-rem($value));
        $output: map.set($output, $name, fluid, generate-fluid-typography-value($fontName, $name));
      } @else {
        $output: map.set($output, $name, px-to-rem($value));
      }
    } @else if ($name == 'line-height') {
      @if (map.has-key(config(typography), fluid) and map.has-key(config(typography, fluid, tags), $fontName)) {
        $output: map.set($output, $name, fallback, px-to-rem($value));
        $output: map.set($output, $name, fluid, generate-fluid-typography-value($fontName, $name));
      } @else {
        $output: map.set($output, $name, px-to-rem($value));
      }
    } @else if ($name == 'letter-spacing') {
      @if (map.has-key(config(typography), fluid) and map.has-key(config(typography, fluid, tags), $fontName)) {
        $output: map.set($output, $name, fallback, px-to-rem($value));
        $output: map.set($output, $name, fluid, generate-fluid-typography-value($fontName, $name));
      } @else {
        $output: map.set($output, $name, px-to-rem($value));
      }
    } @else {
      $output: map.set($output, $name, $value);
    }
  }

  @return $output;
}

// Create typography map
$typographyMap: ();

// Parse token fonts map into typography map for use in a mixin
@each $screen, $map in token('font') {
  @each $name, $font in $map {
    $sanitizedName: sanitize($name);
    $typographyMap: map.set($typographyMap, $sanitizedName, $screen, generate-font-attributes-map($name, $font));
  }
}

// Generates font styles with all breakpoints that were defined in the Figma
@mixin typography($name) {
  $sanitizedName: sanitize($name);

  @each $screen, $size in $sortedBreakpoints {
    @include screen($screen) {
      @each $attr, $value in map.get($typographyMap, $sanitizedName, $screen) {
        // Catch fluid typography values representred as a map
        @if (type-of($value) == 'map') {
          #{$attr}: map.get($value, fallback);
          @supports (#{$attr}: map.get($value, fluid)) {
            #{$attr}: map.get($value, fluid);
          }
        } @else {
          #{$attr}: $value;
        }
      }
    }
  }
}



// LEt's do fluid across multiple breakpoints.
// in Figma:
// fluid steps would be marked as ie: `desktop/header-1-fluid`
// in Mono:
// values will be generated programiatically for each specified breakpoint
// 
