@use 'sass:map';

@function map-sort-by-values($map) {
  // Transform map to zipped list
  $keys: ();
  $values: ();

  @each $key, $val in $map {
    $keys: append($keys, $key);
    $values: append($values, $val);
  }

  $list: zip($keys, $values);

  $sortedMap: ();
  @while length($list) > 0 {

    // Find smallest pair
    $smallestPair: nth($list, 1);
    @each $pair in $list {
      $value: nth($pair, 2);
      $smallestValue: nth($smallestPair, 2);
      @if $value < $smallestValue {
        $smallestPair: $pair;
      }
    }

    // Add smallest pair to sorted map
    $key: nth($smallestPair, 1);
    $value: nth($smallestPair, 2);
    $sortedMap: map-merge($sortedMap, ($key: $value));

    // Remove from list smallest pair
    $smallestPairIndex: index($list, $smallestPair);
    $newList: ();
    @for $i from 1 through length($list) {
      @if $i != $smallestPairIndex {
        $newList: append($newList, nth($list, $i), "space");
      }
    }
    $list: $newList;
  }

  @return $sortedMap;
}

@function map-get-plain($map, $keys...) {
  $value: map.get($map, $keys...);
  @return safe-unquote($value);
}

// Config
@function config($keys...) {
  $value: map.get($configs, $keys...);
  @return $value;
}

// Tokens
@function token($keys...) {
  $value: map.get($tokens, $keys...);
  @return $value;
}

@function color($keys...) {
  @return token(color, $keys...);
}

@function breakpoint($keys...) {
  $value: token(breakpoints, $keys...);
  @return $value;
}

@function sortedBreakpoints() {
  @return map-sort-by-values(map.merge(token(breakpoints), ('default': 0)));
}

// Slots
@function slot($keys...) {
  $value: map.get($slots, $keys...);
  @return $value;
}

@function color-slot($keys...) {
  $value: slot(color, $keys...);
  @return color(#{$value});
}

@mixin grid-slot($name) {
  $value: slot(grid, $name);

  @if $value == null { 
    @error 'There is no slot defined for grid > #{$name}'; 
  }

  grid-column: unquote($value);
}
