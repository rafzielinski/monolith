// ***
// TYPOGRAPHY
// ***
$typographyTags: (
  'h1': 'h1',
  'h2': 'h2',
  'h3': 'h3',
  'h4': 'h4',
  'h5': 'h5',
  'h6': 'h6',
  '.intro': 'intro',
  'p': 'paragraph',
  'p.small': 'paragraph-small',
  'p > a': 'inline-link',
  'ul': 'unordered-list',
  'ul li': 'ul-item',
  'ol': 'ordered-list',
  'ol li': 'ol-item',
  'blockquote': 'blockquote',
  'blockquote cite': 'blockquote-cite'
);

// @each $tag, $name in $typographyTags {
//   // @debug $tag, $name '/';
//   %#{$name} {
//     // --typo-#{$name}-font-variable-vw: calc(
//     //   (1600 * (var(--typo-#{$name}-font-max) - var(--typo-#{$name}-font-min)))
//     //   / (var(--typo-#{$name}-font-max-screen, --font-max-screen) - var(--typo-#{$name}-font-min-screen, --font-min-screen))
//     // )
//     // --typo-#{$name}-font-variable-rem: calc()
//     //
//     // --typo-#{$name}-font-variable: calc(var(--typo-#{$name}))
//
// // const factor = (1 / (maxVw - minVw)) * (maxFs - minFs);
// // const calcRem = minFs - minVw * factor;
// // const calcVw = 100 * factor;
//
//     font-family: var(--typo-#{$name}-font-family);
//     font-size: var(--typo-#{$name}-font-max-size);
//     font-size: clamp(
//       var(--typo-#{$name}-font-min-size), 
//       var(--typo-#{$name}-font-variable), 
//       var(--typo-#{$name}-font-max-size)
//     );
//     color: var(--typo-#{$name}-color);
//
//     @extend %#{$name}-custom-css !optional;
//   }
// }

// calculations stonem from here: https://github.com/jakobsen/fluid-typography/blob/main/src/components/result.js
// numbers generated are ugly, should be rounded to float 2
@each $name, $config in $config-typography {
  $maxScreen: rem(map-get(map-get(map-get($config, 'fluid'), 'max'), 'screen'));
  $minScreen: rem(map-get(map-get(map-get($config, 'fluid'), 'min'), 'screen'));
  $maxFont: map-get(map-get(map-get($config, 'fluid'), 'max'), 'size');
  $minFont: map-get(map-get(map-get($config, 'fluid'), 'min'), 'size');

  $factor: (1 / ($maxScreen - $minScreen) * ($maxFont - $minFont));
  $rem: $minFont - $minScreen * $factor;
  $vw: (100 * $factor) * 1vw;

  %#{$name} {
    font-family: map-get($config, 'family');
    font-size: clamp($minFont, calc($vw + $rem), $maxFont);
  }
}

.generic-content {
  @each $tag, $name in $typographyTags {
    #{$tag} { @extend %#{$name} !optional; }
  }
}





















// h1 { @extend %h1; }

// $default-typography-breakpoint: $mw-content;

// $default-font-sizes: (
//   header6: ms(0),
//   header5: ms(1),
//   header4: ms(2),
//   header3: ms(3),
//   header2: ms(4),
//   header1: ms(5),
// );

// %h1 { @include generateTypography('header1'); }
// %h2 { @include generateTypography('header2'); }
// %h3 { @include generateTypography('header3'); }
// %h4 { @include generateTypography('header4'); }
// %h5 { @include generateTypography('header5'); }
// %h6 { @include generateTypography('header6'); }
//
// %intro { @include generateTypography('intro'); }
// %p { @include generateTypography('paragraph'); }
// %p-small { @include generateTypography('paragraph-small'); }
// %link { @include generateTypography('link'); }
// %link-inline {
//   font-size: inherit;
//   line-height: inherit;
//   font-weight: inherit;
//   color: inherit; 
//   text-decoration: none; 
// }
// %ul { @include generateTypography('unordered-list'); }
// %ul-li { @include generateTypography('ul-item'); }
// %ol { @include generateTypography('ordered-list'); }
// %ol-li { @include generateTypography('ol-item'); }
// %quote { @include generateTypography('quote'); }
// %quote-cite { @include generateTypography('quote-cite'); }

